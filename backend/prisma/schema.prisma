

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  MAKER
  DISTRIBUTOR
  DILER
}

model User {
  id             Int     @id @default(autoincrement())
  companyName    String
  legalAddress   String
  contactNumber  String  @unique
  country        String?
  paymentAccount String  @unique
  BIK            String  @unique
  KPP            String  @unique
  INN            String  @unique
  role           Role

  products         Product[]   @relation("OwnerProducts")
  makerProducts    Product[]   @relation("MakerProducts")
  warehouses       Warehouse[]
  makerCheck       Check[]     @relation("Maker")
  distributorCheck Check[]     @relation("Distributor")
  dilerCheck       Check[]     @relation("Diler")
}

model Maker {
  id             Int
  companyName    String
  legalAddress   String
  contactNumber  String  @unique
  country        String
  paymentAccount String  @unique
  BIK            String  @unique
  KPP            String  @unique
  INN            String  @unique
}

model Distributor {
  id             Int
  companyName    String
  legalAddress   String
  contactNumber  String  @unique
  paymentAccount String  @unique
  BIK            String  @unique
  KPP            String  @unique
  INN            String  @unique
}

model Diler {
  id             Int
  companyName    String
  legalAddress   String
  contactNumber  String  @unique
  paymentAccount String  @unique
  BIK            String  @unique
  KPP            String  @unique
  INN            String  @unique
}


model Product {
  id              Int              @id @default(autoincrement())
  name            String
  price           Int
  makerId         Int
  maker           User             @relation("MakerProducts", fields: [makerId], references: [id])
  ownerId         Int
  owner           User             @relation("OwnerProducts", fields: [ownerId], references: [id])
  characteristics Characteristic[]
  quantity        Int

  checks    Check[]
  warehouseProducts WarehouseProduct[]
  deleted Boolean                  @default(false)

}

model Characteristic {
  id        Int     @id @default(autoincrement())
  name      String
  value     String
  rowKey    String
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

enum CheckType {
  RECEPTION
  SALE
}

model Check {
  id              Int      @id @default(autoincrement())
  productQuantity Int
  date            DateTime @default(now())

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  distributorId Int
  distributor   User @relation("Distributor", fields: [distributorId], references: [id])

  makerId Int?
  maker   User? @relation("Maker", fields: [makerId], references: [id])

  dilerId Int?
  diler   User? @relation("Diler", fields: [dilerId], references: [id])

  summary Int

  type CheckType
}

model Warehouse {
  id            Int     @id @default(autoincrement())
  name          String
  address       String
  distributorId Int
  distributor   User    @relation(fields: [distributorId], references: [id])
  warehouseProducts WarehouseProduct[]
}

model WarehouseProduct {
  id            Int     @id @default(autoincrement())
  quantity      Int
  productId     Int
  warehouseId   Int
  price         Int

  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])
}
